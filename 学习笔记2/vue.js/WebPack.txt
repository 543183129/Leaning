定义:模块打包机，分析项目结构，找到Javascript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等）
			，并将其转换和打包为合适的格式供浏览器使用。
优点：
	模块化
	提高开发效率
	处理速度更快更直接
	能够打包更多不同类型的文件

工作方式:
	把项目当成一个整体，通过给定一个主文件（index.js）。webPack将从这个文件开始查找到项目所依赖的文件，使用loaders处理他们，最后打包成一个（或多个）浏览器可识别的文件

安装方式:
	//全局安装
	npm install -g webpack
	//安装到你的项目目录
	npm install --save-dev webpack

新建文件:
	webpack.config.js


	“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录
	const path=require('path');
	module.exports={
		//调试时候使用
		devtool: 'eval-source-map',
		//入口
		entry:{
			main:'./src/main.js'
		}
		//出口
		output:{
			path：path.join(__dirname,'dist'，'..'),  //打包后文件存放的地方..代表当前目录的上一级的dist
			filename:'./build.js'//打包后输入的文件名称  => 指定的js文件
		},
		//设置本地服务器
		devServer: {
		    contentBase: "./public",//本地服务器所加载的页面所在的目录
		    historyApiFallback: true,//不跳转
		    inline: true//实时刷新
 		} 
 		modules：{
 			test：//一个用以匹配loaders所处理文件的拓展名的正则表达式（必须）,
 			loader：loader的名称（必须）  =》rules（2.x）
 			include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；
 			query：为loaders提供额外的设置选项（可选）

 		},
 		//插件
 		plugins: [
       		new webpack.BannerPlugin('版权所有，翻版必究')
    	],

	}

功能：
	调试:source maps=>配置devtools
		开发阶段:eval-source-map
	构建本地服务器
		npm install --save-dev webpack-dev-server
		在package.json中script对象中添加命令
			"server": "webpack-dev-server --open"
		在终端中输入npm run server查看结果
	Loaders功能：
		通过使用不同的loader，调用外部的脚本或工具，实现对不同格式的文件处理
			eg:scss=>css
				ES6，ES7=>现代浏览器兼容的JS文件
				React中的jsx=>js文件
	插件:扩展webpack的功能
		是一个数组,使用=>添加一个插件的实例
		



产品阶段的构建
	创建webpack.production.config.js文件



