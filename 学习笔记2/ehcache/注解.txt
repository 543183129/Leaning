1.@Cacheable
	作用：表明所修饰的方法是可以缓存的，当第一次调用这个方法时，它的结果会被缓存下来，在缓存的有效时间内，以后访问这个方法都直接返回缓存结果，不再执行方法中的代码段。 
	key属性来指定key的生成规则,如果要引用参数的话:#userId
		不指定key默认和参数名一样
	value：缓存位置名称，不能为空
	condition属性来设置条件,满足条件的时候才加入缓存
				默认为空，表示全部都加入缓存中
	eg：
		@Cacheable(value="UserCache", key="'user:' + #userId")
			将缓存保存到名称为UserCache中，键为"user:"字符串加上userId值，如 'user:1'
		@Cacheable(value="UserCache", condition="#userId.length() < 12")
			将缓存保存进UserCache中，并当参数userId的长度小于12时才保存进缓存，默认使用参数值及类型作为缓存的key
			保存缓存需要指定key，value， value的数据类型，不指定key默认和参数名一样如："1"
2.@CachePut
	@CachePut不仅会缓存方法的结果，还会执行方法的代码段
3.@CacheEvict
	用来删除失效或无用的缓存数据。
	value：缓存位置名称，不能为空，同上
	key：缓存的key，默认为空，同上
	condition：触发条件，只有满足条件的情况才会清除缓存，默认为空，支持SpEL
	allEntries：true表示清除value中的全部缓存，默认为false












SpEL:是一种可以与一个基于spring的应用程序中的运行时对象交互的东西